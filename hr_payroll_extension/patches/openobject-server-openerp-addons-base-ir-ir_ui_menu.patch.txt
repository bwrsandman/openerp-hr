=== modified file 'openerp/addons/base/ir/ir_ui_menu.py'
--- openerp/addons/base/ir/ir_ui_menu.py	2013-05-07 10:40:25 +0000
+++ openerp/addons/base/ir/ir_ui_menu.py	2013-07-18 11:15:26 +0000
@@ -281,6 +281,19 @@
 
         return res
 
+    def _children_needaction_enabled(self, menu):
+        """return True if at least one descendant menu item uses the needaction mechanism"""
+        
+        for child in menu.child_id:
+            if child.action and child.action.type in ('ir.actions.act_window', 'ir.actions.client') and child.action.res_model:
+                obj = self.pool.get(child.action.res_model)
+                if obj and obj._needaction:
+                    return True
+            else:
+                return self._children_needaction_enabled(child)
+        
+        return False
+    
     def _get_needaction_enabled(self, cr, uid, ids, field_names, args, context=None):
         """ needaction_enabled: tell whether the menu has a related action
             that uses the needaction mechanism. """
@@ -290,6 +303,9 @@
                 obj = self.pool.get(menu.action.res_model)
                 if obj and obj._needaction:
                     res[menu.id] = True
+            else:
+                if self._children_needaction_enabled(menu):
+                    res[menu.id] = True
         return res
 
     def get_needaction_data(self, cr, uid, ids, context=None):
@@ -338,7 +354,42 @@
                         dom = eval(menu.action.params_store or '{}', {'uid': uid}).get('domain')
                     res[menu.id]['needaction_enabled'] = obj._needaction
                     res[menu.id]['needaction_counter'] = obj._needaction_count(cr, uid, dom, context=context)
+            else:
+                counter = self._get_needaction_counter(cr, uid, menu, context=context)
+                if counter > 0:
+                    res[menu.id]['needaction_enabled'] = True
+                    res[menu.id]['needaction_counter'] = counter
         return res
+    
+    def _get_needaction_counter(self, cr, uid, menu, context=None):
+        
+        total = 0
+        res_list = []
+        for child in menu.child_id:
+            found = False
+            counter = 0
+            if child.action and child.action.type in ('ir.actions.act_window', 'ir.actions.client') and child.action.res_model:
+                obj = self.pool.get(child.action.res_model)
+                if obj and obj._needaction:
+                    if child.action.type == 'ir.actions.act_window':
+                        dom = child.action.domain and eval(child.action.domain, {'uid': uid}) or []
+                    else:
+                        dom = eval(child.action.params_store or '{}', {'uid': uid}).get('domain')
+                    counter = obj._needaction_count(cr, uid, dom, context=context)
+                    for r in res_list:
+                        if r['obj'] == obj._name:
+                            found = True
+                            if r['count'] < counter:
+                                r['count'] = counter
+                    if not found:
+                        res_list.append({'obj': obj._name,
+                                         'count': counter})
+            else:
+                total +=self._get_needaction_counter(cr, uid, child, context=context)
+        
+        for r in res_list:
+            total += r['count']
+        return total
 
     _columns = {
         'name': fields.char('Menu', size=64, required=True, translate=True),

